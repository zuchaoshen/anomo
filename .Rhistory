library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
CI.mo
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
d1 = .1; se1 = .1; d2 = .2; se2 = .1;
d1 = .1; se1 = .1; d2 = .2; se2 = .1;
n.mcci = 10000; sig.level = .05;
two.tailed = TRUE;
bound.eq = NULL;
xlim = NULL;
xlab = NULL;
ylab = NULL;
verbose = TRUE;
par <- list(d1 = d1, se1 = se1,
d2 = d2, se2 = se2,
n.mcci = n.mcci, sig.level = sig.level,
two.tailed = two.tailed, bound.eq =  bound.eq,
xlim = xlim, xlab = xlab, ylab = ylab,
verbose = verbose)
if(two.tailed) {tside = sig.level/2}
NumberCheck <- function(x) {!is.null(x) && !is.numeric(x)}
if (sum(sapply(list(d1, se1, d2, se2),
function(x) is.null(x))) >= 1)
stop("All of 'd1', 'se1', 'd2', 'se2' must be specified")
if (sum(sapply(list(d1, se1, d2, se2), function(x) {
NumberCheck(x)
})) >= 1)
stop("'d1', 'se1', 'd2', 'se2' must be numeric")
d1.mc <- rnorm(n.mcci, d1, se1)
d2.mc <- rnorm(n.mcci, d2, se2)
d2_d1.mc <- d2.mc - d1.mc
d2_d1.mean <- mean(d2.mc - d1.mc)
CI.mo <- quantile(d2_d1.mc,c(tside, 1 - tside))
CI.eq <- quantile(d2_d1.mc,c(sig.level, 1 - sig.level))
if(is.null(xlim)){xlim = 2*CI.mo}
if(is.null(xlab)){xlab = "Difference in Effects"}
if(is.null(ylab)){ylab = " "}
plot(x = d2_d1.mean, y = d2_d1.mean,
xlim = xlim, xlab = xlab, ylab = ylab,
yaxt = "n",
pch = 15)
segments(x0 = CI.mo[1], x1 = CI.mo[2] ,
y0 = d2_d1.mean,
y1 = d2_d1.mean,
col = "black")
segments(x0 = CI.eq[1], x1 = CI.eq[2] ,
y0 = d2_d1.mean,
y1 = d2_d1.mean,
col = "black", lwd = 3)
if(is.null(bound.eq)){
abline(v = CI.eq[1], lty = 3)
abline(v = CI.eq[2], lty = 3)
} else{
abline(v = bound.eq[1], lty = 3)
abline(v = bound.eq[2], lty = 3)
}
abline(v = 0, lty = 5)
if (verbose) print(paste("The MCCI for Moderation is c(",
CI.mo[1], "," , CI.mo[2], ")",
".\n", ,  sep = ""
))
CI.mo
CI.mo[1]
if (verbose) print(paste("The MCCI for Moderation is c(",
CI.mo[1], "," , CI.mo[2], ")",
".\n", ,  sep = ""
))
?paset
?paste
if (verbose) print(paste("The MCCI for Moderation is", "c(",
CI.mo[1], "," , CI.mo[2], ")",
".\n", ,  sep = ""))
paste("The MCCI for Moderation is", "c("
if (verbose) print(paste("The MCCI for Moderation is", "c(",
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ")",
".\n",  sep = ""))
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
".\n",  sep = ""))
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"\n",  sep = ""))
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
,  sep = ""))
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ")."
,  sep = ""))
if (verbose) print(paste("The MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The", sig.level*100, "%", "MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
sig.level
if (verbose) print(paste("The", (1-sig.level)*100, "%", "MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, "%", "MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, " %", "MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, "% ", "MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The ", (1-2*sig.level)*100,  "%MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ").",
"The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
if (verbose) {
print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
CI.mo[1], "," , CI.mo[2], ")."
,  sep = ""))
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
CI.eq[1], "," , CI.eq[2], ")."
,  sep = ""))
}
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
round(CI.eq[1], 4), "," , CI.eq[2], ")."
,  sep = ""))
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
round(CI.eq[1], 4), "," , round(CI.eq[2], 4), ")."
,  sep = ""))
print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
round(CI.mo[1], 4), "," , round(CI.mo[2], 4), ")."
,  sep = ""))
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
round(CI.eq[1], 4), "," , round(CI.eq[2], 4), ")."
,  sep = ""))
if (verbose) {
print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
round(CI.mo[1], 4), "," , round(CI.mo[2], 4), ")."
,  sep = ""))
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
round(CI.eq[1], 4), "," , round(CI.eq[2], 4), ")."
,  sep = ""))
}
if (verbose) {
print(paste("The ", (1-sig.level)*100, "% MCCI for Moderation is", " c(",
round(CI.mo[1], 4), "," , round(CI.mo[2], 4), ").", "\n"
,  sep = ""))
print(paste("The ", (1-2*sig.level)*100,  "% MCCI for Equivalence Test is", " c(",
round(CI.eq[1], 4), "," , round(CI.eq[2], 4), ")."
,  sep = ""))
}
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .2, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2))
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
####################
devtools::spell_check() # spell check
# Step One ----
# Save packages and update R
getwd()
setwd("D:\\Dropbox\\LatexR\\R") # set work directory
# 1. Before you upgrade, build a temp file with all of your old packages, or backup your packages.
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
# library(installr)
#2,If you know you wish to upgrade R, and you want the packages moved (not copied, MOVED), you can simply run:
# installing/loading the package:
if(!require(installr)) {install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
# Step One ----
# Save packages and update R
getwd()
setwd("D:\\Dropbox\\LatexR\\R") # set work directory
# 3. update.packages()
# update.packages()
#3. Once you've got the new version up and running, reload the
# saved packages and re-install them from CRAN.
setwd("D:\\Dropbox\\LatexR\\R") # Be sure this is the same
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
# 4. need to update your R packages to make sure they are
# compiled for the new version, you can do it with this command
update.packages(checkBuilt =TRUE, ask = FALSE)
# 4. need to update your R packages to make sure they are
# compiled for the new version, you can do it with this command
update.packages(checkBuilt =TRUE, ask = FALSE)
setwd("D:\\Dropbox\\anomo")
library(devtools)
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
?graphics
?RoxygenNote
??RoxygenNote
devtools::document()
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
devtools::document()
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
devtools::document()
#install.packages("roxygen2")
#devtools::use_mit_license() #generate MIT license
library(anomo)
devtools::document()
devtools::document()
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
?plot
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
# generate Vignettes
usethis::use_vignette("anomo")
?rnorm
?quantile
devtools::document()
devtools::document()
library(anomo)
myci <- mcci(d1 = .1, se1 = .1, d2 = .3, se2 = .1)
myci <- mcci(d1 = .1, se1 = .1, d2 = .4, se2 = .1,
bound.eq = c(-0.1, 0.2), xlim = c(-.2, .7))
devtools::document()
####################
devtools::spell_check() # spell check
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
####################
devtools::spell_check() # spell check
setwd("D:\\Dropbox\\anomo")
devtools::document()
####################
devtools::spell_check() # spell check
devtools::check_rhub() # rhub check
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
setwd("D:\\Dropbox\\anomo")
library(devtools)
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
devtools::document()
##############
#########################################################
getwd()
setwd("D:\\Dropbox\\anomo")
devtools::document()
devtools::check_rhub() # rhub check
?rhubv2
rc_new_token()
devtools::check_rhub() # rhub check
library(rhub)
pak::pkg_install("rhub")
setwd("D:\\Dropbox\\anomo")
library(devtools)
####################
devtools::spell_check() # spell check
setwd("D:\\Dropbox\\anomo")
library(devtools)
library(rhub)
####################
devtools::spell_check() # spell check
####################
devtools::spell_check() # spell check
####################
devtools::spell_check() # spell check
setwd("D:\\Dropbox\\anomo")
devtools::document()
####################
devtools::spell_check() # spell check
devtools::check_rhub() # rhub check
devtools::rhub_check() # rhub check
rhub::rhub_check() # rhub check
rhub::rhub_check() # rhub check
rhub::rhub_check() # rhub check
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
devtools::release() # submit to CRAN
